<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QQBot.NET</name>
    </assembly>
    <members>
        <member name="T:QQBot.NET.AsyncEventHandler`1">
            <summary>
            异步事件处理器
            </summary>
            <typeparam name="TEventArgs">事件参数类型</typeparam>
            <param name="sender">发送者</param>
            <param name="e">事件参数</param>
            <returns>任务</returns>
        </member>
        <member name="T:QQBot.NET.BotService">
            <summary>
            机器人服务，提供机器人的功能支持
            </summary>
        </member>
        <member name="M:QQBot.NET.BotService.#ctor(QQBot.NET.Models.BotCreateInfo)">
            <summary>
            创建并返回机器人服务实例
            </summary>
            <param name="createInfo">Bot服务创建信息</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.StartAsync">
            <summary>
            启动服务
            </summary>
            <returns>启动任务</returns>
        </member>
        <member name="M:QQBot.NET.BotService.StopAsync">
            <summary>
            停止服务
            </summary>
            <returns>停止任务</returns>
        </member>
        <member name="E:QQBot.NET.BotService.OnReadyAsync">
            <summary>
            READY事件（鉴权成功后，QQ 后台会下发一个 Ready Event）
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnResumedAsync">
            <summary>
            RESUMED事件（恢复登录态成功后，QQ 后台会下发一个 Resumed Event）
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnMessageCreateAsync">
            <summary>
            文字子频道全量消息（私域）<br/>用户在文字子频道内发送的所有聊天消息（私域）
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnAtMessageCreateAsync">
            <summary>
            文字子频道@机器人<br/>用户在文字子频道内@机器人发送的消息
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnDirectMessageCreateAsync">
            <summary>
            频道私信消息<br/>用户在频道私信给机器人发送的消息
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnC2CMessageCreateAsync">
            <summary>
            单聊消息<br/>用户在单聊发送消息给机器人
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnGroupAtMessageCreateAsync">
            <summary>
            群聊@机器人<br/>用户在群内@机器人发动的消息
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnMessageReactionAddAsync">
            <summary>
            用户对消息进行表情表态时
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnMessageReactionRemoveAsync">
            <summary>
            用户对消息进行取消表情表态时
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnInteractionCreateAsync">
            <summary>
            用户点击了消息体的回调按钮
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnGuildCreateAsync">
            <summary>
            机器人被加入到某个频道的时候
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnGuildUpdateAsync">
            <summary>
            - 频道信息变更<br/>- 事件内容为变更后的数据
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnGuildDeleteAsync">
            <summary>
            - 频道被解散<br/>- 机器人被移除<br/>- 事件内容为变更前的数据
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnChannelCreateAsync">
            <summary>
            子频道被创建
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnChannelUpdateAsync">
            <summary>
            子频道信息变更
            </summary>
        </member>
        <member name="E:QQBot.NET.BotService.OnChannelDeleteAsync">
            <summary>
            子频道被删除
            </summary>
        </member>
        <member name="M:QQBot.NET.BotService.SendChannelMessageAsync(QQBot.NET.Models.GuildMessageReq,System.String)">
            <summary>
            发送文字子频道消息<br/>注意：如果消息需要审核，会抛出异常，详见 <a href="https://bot.q.qq.com/wiki/develop/api/openapi/error/error.html#%E9%94%99%E8%AF%AF%E7%A0%81%E5%A4%84%E7%90%86">错误码处理</a> 304023与304024
            </summary>
            <param name="message">要发送的消息</param>
            <param name="channalID">文字子频道ID</param>
            <returns>消息</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.SendDirectMessageAsync(QQBot.NET.Models.GuildMessageReq,System.String)">
            <summary>
            发送频道私信消息，需要先调用<see cref="M:QQBot.NET.BotService.CreateDirectMessageSessionAsync(QQBot.NET.Models.DirectMessageSessionCreateInfo)"/>创建私信会话，再调用此接口发送消息，否则会报错<br/>注意：如果消息需要审核，会抛出异常，详见 <a href="https://bot.q.qq.com/wiki/develop/api/openapi/error/error.html#%E9%94%99%E8%AF%AF%E7%A0%81%E5%A4%84%E7%90%86">错误码处理</a> 304023与304024
            </summary>
            <param name="message">要发送的消息</param>
            <param name="guildID">用户的ID，需要通过<see cref="M:QQBot.NET.BotService.CreateDirectMessageSessionAsync(QQBot.NET.Models.DirectMessageSessionCreateInfo)"/>获取</param>
            <returns>消息</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.CreateDirectMessageSessionAsync(QQBot.NET.Models.DirectMessageSessionCreateInfo)">
            <summary>
            创建频道私信会话<br/>用于机器人和在同一个频道内的成员创建私信会话。
            </summary>
            <param name="info">私信会话创建信息</param>
            <returns>私信会话</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.DeleteChannelMessageAsync(System.String,System.String,System.Boolean)">
            <summary>
            撤回文字子频道消息
            </summary>
            <param name="channelID">文字子频道ID</param>
            <param name="messageID">消息ID</param>
            <param name="hideTip">是否隐藏提示小灰条</param>
            <returns></returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.DeleteChannelMessageAsync(QQBot.NET.Models.GuildMessage,System.Boolean)">
            <summary>
            撤回文字子频道消息
            </summary>
            <param name="message">消息</param>
            <param name="hideTip">是否隐藏提示小灰条</param>
            <returns></returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.DeleteDirectMessageAsync(System.String,System.String,System.Boolean)">
            <summary>
            撤回频道私信消息
            </summary>
            <param name="guildID">用户ID</param>
            <param name="messageID">消息ID</param>
            <param name="hideTip">是否隐藏提示小灰条</param>
            <returns></returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.DeleteDirectMessageAsync(QQBot.NET.Models.GuildMessage,System.Boolean)">
            <summary>
            撤回频道私信消息
            </summary>
            <param name="message">消息</param>
            <param name="hideTip">是否隐藏提示小灰条</param>
            <returns></returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.SendUserMessageAsync(QQBot.NET.Models.QQMessageReq,System.String)">
            <summary>
            发送单聊消息
            </summary>
            <param name="message">消息</param>
            <param name="openID">QQ用户的OpenID，可在各类事件中获得</param>
            <returns>发送消息结果</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.SendGroupMessageAsync(QQBot.NET.Models.QQMessageReq,System.String)">
            <summary>
            发送群聊消息
            </summary>
            <param name="message">消息</param>
            <param name="groupOpenID">群聊的OpenID</param>
            <returns>发送消息结果</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.UploadUserMediaAsync(QQBot.NET.Models.MediaReq,System.String)">
            <summary>
            上传用户媒体
            </summary>
            <param name="media">媒体</param>
            <param name="openID">QQ用户的OpenID，可在各类事件中获得</param>
            <returns>上传媒体结果</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.UploadGroupMediaAsync(QQBot.NET.Models.MediaReq,System.String)">
            <summary>
            上传群媒体
            </summary>
            <param name="media">媒体</param>
            <param name="groupOpenID">群聊的OpenID</param>
            <returns>上传媒体结果</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.SetEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.EmojiType,System.String)">
            <summary>
            机器人发表表情表态
            </summary>
            <param name="channelID">子频道ID</param>
            <param name="messageID">消息ID</param>
            <param name="type">表情类型</param>
            <param name="emojiID">表情ID</param>
            <returns></returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.SetEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.EmojiType,System.String)">
            <summary>
            机器人发表表情表态
            </summary>
            <param name="message">消息</param>
            <param name="type">表情类型</param>
            <param name="emojiID">表情ID</param>
            <returns></returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.SetEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.Emoji)">
            <summary>
            机器人发表表情表态
            </summary>
            <param name="channelID">子频道ID</param>
            <param name="messageID">消息ID</param>
            <param name="emoji">表情</param>
            <returns></returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.SetEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.Emoji)">
            <summary>
            机器人发表表情表态
            </summary>
            <param name="message">消息</param>
            <param name="emoji">表情</param>
            <returns></returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.DeleteEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.EmojiType,System.String)">
            <summary>
            删除机器人发表的表情表态
            </summary>
            <param name="channelID">子频道ID</param>
            <param name="messageID">消息ID</param>
            <param name="type">表情类型</param>
            <param name="emojiID">表情ID</param>
            <returns></returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.DeleteEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.EmojiType,System.String)">
            <summary>
            删除机器人发表的表情表态
            </summary>
            <param name="message">消息</param>
            <param name="type">表情类型</param>
            <param name="emojiID">表情ID</param>
            <returns></returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.DeleteEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.Emoji)">
            <summary>
            删除机器人发表的表情表态
            </summary>
            <param name="channelID">子频道ID</param>
            <param name="messageID">消息ID</param>
            <param name="emoji">表情</param>
            <returns></returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.DeleteEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.Emoji)">
            <summary>
            删除机器人发表的表情表态
            </summary>
            <param name="message">消息</param>
            <param name="emoji">表情</param>
            <returns></returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.GetEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.EmojiType,System.String)">
            <summary>
            获取消息表情表态的用户列表
            </summary>
            <param name="channelID">子频道ID</param>
            <param name="messageID">消息ID</param>
            <param name="type">表情类型</param>
            <param name="emojiID">表情ID</param>
            <returns>用户对象列表，参考 User，会返回 id, username, avatar</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.GetEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.EmojiType,System.String)">
            <summary>
            获取消息表情表态的用户列表
            </summary>
            <param name="message">消息</param>
            <param name="type">表情类型</param>
            <param name="emojiID">表情ID</param>
            <returns>用户对象列表，参考 User，会返回 id, username, avatar</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.GetEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.Emoji)">
            <summary>
            获取消息表情表态的用户列表
            </summary>
            <param name="channelID">子频道ID</param>
            <param name="messageID">消息ID</param>
            <param name="emoji">表情</param>
            <returns>用户对象列表，参考 User，会返回 id, username, avatar</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.GetEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.Emoji)">
            <summary>
            获取消息表情表态的用户列表
            </summary>
            <param name="message">消息</param>
            <param name="emoji">表情</param>
            <returns>用户对象列表，参考 User，会返回 id, username, avatar</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.RespondToInteractionAsync(System.String)">
            <summary>
            回应交互事件<br/>由于 websocket 推送事件是单向的，开发者收到事件之后，需要进行一次"回应"，告知QQ后台，事件已经收到，否则客户端会一直处于loading状态，直到超时
            </summary>
            <param name="interactionID">交互ID</param>
            <returns></returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.GetCurrentUserAsync">
            <summary>
            获取当前用户（机器人）信息
            </summary>
            <returns>用户信息</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.GetGuildsAsync">
            <summary>
            获取当前用户（机器人）所加入的频道列表
            </summary>
            <returns>频道用户列表</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.GetGuildAsync(System.String)">
            <summary>
            获取频道信息
            </summary>
            <param name="guildID">频道ID</param>
            <returns>频道信息</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.GetChannelsAsync(System.String)">
            <summary>
            获取子频道列表
            </summary>
            <param name="guildID">频道ID</param>
            <returns>子频道列表</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.GetChannelAsync(System.String)">
            <summary>
            获取子频道详情
            </summary>
            <param name="channelID">子频道ID</param>
            <returns>子频道详情</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.CreateChannelAsync(System.String,QQBot.NET.Models.CreateChannelReq)">
            <summary>
            创建子频道
            </summary>
            <param name="guildID">频道ID</param>
            <param name="channel">子频道创建信息</param>
            <returns>子频道信息</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.ModifyChannelAsync(System.String,QQBot.NET.Models.ModifyChannelReq)">
            <summary>
            修改子频道
            </summary>
            <param name="channelID">子频道ID</param>
            <param name="channel">子频道修改信息</param>
            <returns>子频道信息</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.DeleteChannelAsync(System.String)">
            <summary>
            删除子频道
            </summary>
            <param name="channelID">子频道ID</param>
            <returns></returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.GetChannelOnlineMemberCountAsync(System.String)">
            <summary>
            获取子频道在线成员数<br/>用于查询音视频/直播子频道 channel_id 的在线成员数。
            </summary>
            <param name="channelID">子频道ID</param>
            <returns>子频道在线成员数结果</returns>
            <exception cref="T:QQBot.NET.Exceptions.APIException"></exception>
        </member>
        <member name="M:QQBot.NET.BotService.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:QQBot.NET.Exceptions.APIException">
            <summary>
            API异常
            </summary>
        </member>
        <member name="M:QQBot.NET.Exceptions.APIException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:QQBot.NET.Exceptions.APIException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:QQBot.NET.Exceptions.APIException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="P:QQBot.NET.Exceptions.APIException.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:QQBot.NET.Exceptions.APIException.Msg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:QQBot.NET.Internal.AccessTokenUpdater">
            <summary>
            AccessToken更新器，可以自动更新AccessToken
            </summary>
        </member>
        <member name="M:QQBot.NET.Internal.AccessTokenUpdater.GetAccessTokenAsync">
            <summary>
            获取AccessToken，如果AccessToken已过期则自动更新
            </summary>
            <returns>AccessToken</returns>
        </member>
        <member name="F:QQBot.NET.Internal.API.OpCode.Dispatch">
            <summary>
            服务端进行消息推送
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.OpCode.Heartbeat">
            <summary>
            客户端或服务端发送心跳
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.OpCode.Identify">
            <summary>
            客户端发送鉴权
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.OpCode.Resume">
            <summary>
            客户端恢复连接
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.OpCode.Reconnect">
            <summary>
            服务端通知客户端重新连接
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.OpCode.InvalidSession">
            <summary>
            当 identify 或 resume 的时候，如果参数有错，服务端会返回该消息
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.OpCode.Hello">
            <summary>
            当客户端与网关建立 ws 连接之后，网关下发的第一条消息
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.OpCode.HeartbeatACK">
            <summary>
            当发送心跳成功之后，就会收到该消息
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.OpCode.HTTPCallbackACK">
            <summary>
            仅用于 http 回调模式的回包，代表机器人收到了平台推送的数据
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.Payload.OpCode">
            <summary>
            操作码
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.Payload.Data">
            <summary>
            代表事件内容，不同事件类型的事件内容格式都不同，请注意识别。主要是用在op为 0 Dispatch 的时候
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.Payload.Seq">
            <summary>
            下行消息都会有一个序列号，标识消息的唯一性，客户端需要再发送心跳的时候，携带客户端收到的最新的s
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.Payload.Type">
            <summary>
            代表事件类型。主要是用在op为 0 Dispatch 的时候
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.Payload`1.OpCode">
            <summary>
            操作码
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.Payload`1.Data">
            <summary>
            代表事件内容，不同事件类型的事件内容格式都不同，请注意识别。主要是用在op为 0 Dispatch 的时候
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.Payload`1.Seq">
            <summary>
            下行消息都会有一个序列号，标识消息的唯一性，客户端需要再发送心跳的时候，携带客户端收到的最新的s
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.API.Payload`1.Type">
            <summary>
            代表事件类型。主要是用在op为 0 Dispatch 的时候
            </summary>
        </member>
        <member name="T:QQBot.NET.Internal.BotContext">
            <summary>
            机器人上下文，用于处理Http请求与响应（短连接）
            </summary>
        </member>
        <member name="T:QQBot.NET.Internal.BotWebSocket">
            <summary>
            机器人WebSocket，用于处理WebSocket交互（长连接）
            </summary>
        </member>
        <member name="F:QQBot.NET.Internal.Constants.TimeError">
            <summary>
            时间误差，单位毫秒。由于网络状况等原因，数据包传输可能会有一定的延迟，以此为时间误差值，以缓解延迟导致的问题
            </summary>
        </member>
        <member name="P:QQBot.NET.Internal.Models.AccessTokenInfo.ExpireTime">
            <summary>
            失效时间<br/>尼玛有的API返回具体时间，有的API返回时间戳数值，而且这数值还是字符串类型的，你后端怎么这么不统一啊？？？
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.Ark">
            <summary>
            消息Ark
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Ark.TemplateID">
            <summary>
            模版ID，管理端可获得或内邀申请获得<br/>
            以下默认可使用：<br/>
            <a href="https://bot.q.qq.com/wiki/develop/api-v2/server-inter/message/type/template/template_23.html">23 链接+文本列表模板|QQ机器人文档</a><br/>
            <a href="https://bot.q.qq.com/wiki/develop/api-v2/server-inter/message/type/template/template_24.html">24 文本+缩略图模板|QQ机器人文档</a><br/>
            <a href="https://bot.q.qq.com/wiki/develop/api-v2/server-inter/message/type/template/template_37.html">37 大图模板|QQ机器人文档</a>
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Ark.KeyValues">
            <summary>
            消息Ark键值对表
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ArkKv">
            <summary>
            消息Ark键值对
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ArkKv.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ArkKv.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ArkKv.Objects">
            <summary>
            消息Ark对象表
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ArkObj">
            <summary>
            消息Ark对象
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ArkObj.ObjectKeyValues">
            <summary>
            消息Ark对象键值对表
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ArkObjKv">
            <summary>
            消息Ark对象键值对
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ArkObjKv.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ArkObjKv.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.AtMessageEventArgs">
            <summary>
            At消息事件参数
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.BotCreateInfo">
            <summary>
            Bot服务创建信息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.BotCreateInfo.AppID">
            <summary>
            AppID，从开放平台管理端获得
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.BotCreateInfo.ClientSecret">
            <summary>
            ClientSecret，从开放平台管理端获得
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.BotCreateInfo.Intents">
            <summary>
            订阅事件，默认订阅所有公开事件
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.BotCreateInfo.ReconnectInterval">
            <summary>
            重连间隔，默认5秒
            </summary>
        </member>
        <member name="M:QQBot.NET.Models.BotCreateInfo.#ctor">
            <summary>
            创建Bot服务创建信息
            </summary>
        </member>
        <member name="M:QQBot.NET.Models.BotCreateInfo.#ctor(System.String,System.String,QQBot.NET.Models.Intents,System.Int32)">
            <summary>
            创建Bot服务创建信息
            </summary>
            <param name="appID">AppID，从开放平台管理端获得</param>
            <param name="clientSecret">ClientSecret，从开放平台管理端获得</param>
            <param name="intents">订阅事件，默认订阅所有公开事件</param>
            <param name="reconnectInterval">重连间隔，默认5秒</param>
        </member>
        <member name="M:QQBot.NET.Models.BotCreateInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:QQBot.NET.Models.Channel">
            <summary>
            子频道信息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Channel.ID">
            <summary>
            子频道ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Channel.GuildID">
            <summary>
            频道ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Channel.Name">
            <summary>
            子频道名
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Channel.Type">
            <summary>
            子频道类型
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Channel.SubType">
            <summary>
            子频道子类型
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Channel.Position">
            <summary>
            排序值<br/>
            - postiton 从 1 开始<br/>
            - 当子频道类型为 子频道分组（ChannelType=4）时，由于 position 1 被未分组占用，所以 position 只能从 2 开始<br/>
            - 如果不传默认追加到分组下最后一个<br/>
            - 如果填写一个已经存在的值，那么会插入在原来的元素之前<br/>
            - 如果填写一个较大值，与不填是相同的表现，同时存储的值会根据真实的 position 进行重新计算，并不会直接使用传入的值<br/>
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Channel.ParentID">
            <summary>
            所属分组 ID，仅对子频道有效，对 子频道分组（ChannelType=4） 无效
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Channel.OwnerID">
            <summary>
            创建人 ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Channel.PrivateType">
            <summary>
            子频道私密类型
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Channel.SpeakPermission">
            <summary>
            子频道发言权限
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Channel.ApplicationID">
            <summary>
            用于标识应用子频道应用类型，仅应用子频道时会使用该字段，具体定义请参考 <a href="https://bot.q.qq.com/wiki/develop/api-v2/server-inter/channel/manage/channel/model.html#%E5%BA%94%E7%94%A8%E5%AD%90%E9%A2%91%E9%81%93%E7%9A%84%E5%BA%94%E7%94%A8%E7%B1%BB%E5%9E%8B">应用子频道的应用类型</a>
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Channel.Permissions">
            <summary>
            用户拥有的子频道权限 <a href="https://bot.q.qq.com/wiki/develop/api-v2/server-inter/channel/role-group/channel_permissions/model.html#Permissions">Permissions</a>
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ChannelCreateEventArgs">
            <summary>
            子频道创建事件参数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ChannelCreateEventArgs.Channel">
            <summary>
            子频道事件信息
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ChannelDeleteEventArgs">
            <summary>
            子频道删除事件参数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ChannelDeleteEventArgs.Channel">
            <summary>
            子频道事件信息
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ChannelEventData">
            <summary>
            子频道事件数据
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ChannelEventData.GuildID">
            <summary>
            频道ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ChannelEventData.ID">
            <summary>
            子频道ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ChannelEventData.Name">
            <summary>
            子频道名
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ChannelEventData.OperatorUserID">
            <summary>
            操作人ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ChannelEventData.OwnerID">
            <summary>
            创建人ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ChannelEventData.Type">
            <summary>
            子频道类型
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ChannelEventData.SubType">
            <summary>
            子频道子类型
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ChannelOnlineMemberCountRes">
            <summary>
            子频道在线成员数结果
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ChannelOnlineMemberCountRes.OnlineNumbers">
            <summary>
            在线成员数
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ChannelSubType">
            <summary>
            子频道子类型
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.ChannelSubType.Chat">
            <summary>
            闲聊
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.ChannelSubType.Notice">
            <summary>
            公告
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.ChannelSubType.Guide">
            <summary>
            攻略
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.ChannelSubType.Voice">
            <summary>
            开黑
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ChannelType">
            <summary>
            子频道类型
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.ChannelType.Text">
            <summary>
            文字子频道
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.ChannelType.Preserved1">
            <summary>
            保留，不可用
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.ChannelType.Voice">
            <summary>
            语音子频道
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.ChannelType.Preserved3">
            <summary>
            保留，不可用
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.ChannelType.Grouping">
            <summary>
            子频道分组
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.ChannelType.Live">
            <summary>
            直播子频道
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.ChannelType.Application">
            <summary>
            应用子频道
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.ChannelType.Forum">
            <summary>
            论坛子频道
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ChannelUpdateEventArgs">
            <summary>
            子频道更新事件参数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ChannelUpdateEventArgs.Channel">
            <summary>
            子频道事件信息
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ContextEventArgs">
            <summary>
            上下文事件参数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ContextEventArgs.Service">
            <summary>
            机器人服务
            </summary>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.SendChannelMessageAsync(QQBot.NET.Models.GuildMessageReq,System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.SendChannelMessageAsync(QQBot.NET.Models.GuildMessageReq,System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.SendDirectMessageAsync(QQBot.NET.Models.GuildMessageReq,System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.SendDirectMessageAsync(QQBot.NET.Models.GuildMessageReq,System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.CreateDirectMessageSessionAsync(QQBot.NET.Models.DirectMessageSessionCreateInfo)">
            <inheritdoc cref="M:QQBot.NET.BotService.CreateDirectMessageSessionAsync(QQBot.NET.Models.DirectMessageSessionCreateInfo)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.DeleteChannelMessageAsync(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:QQBot.NET.BotService.DeleteChannelMessageAsync(System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.DeleteChannelMessageAsync(QQBot.NET.Models.GuildMessage,System.Boolean)">
            <inheritdoc cref="M:QQBot.NET.BotService.DeleteChannelMessageAsync(QQBot.NET.Models.GuildMessage,System.Boolean)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.DeleteDirectMessageAsync(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:QQBot.NET.BotService.DeleteDirectMessageAsync(System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.DeleteDirectMessageAsync(QQBot.NET.Models.GuildMessage,System.Boolean)">
            <inheritdoc cref="M:QQBot.NET.BotService.DeleteDirectMessageAsync(QQBot.NET.Models.GuildMessage,System.Boolean)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.SendUserMessageAsync(QQBot.NET.Models.QQMessageReq,System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.SendUserMessageAsync(QQBot.NET.Models.QQMessageReq,System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.SendGroupMessageAsync(QQBot.NET.Models.QQMessageReq,System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.SendGroupMessageAsync(QQBot.NET.Models.QQMessageReq,System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.UploadUserMediaAsync(QQBot.NET.Models.MediaReq,System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.UploadUserMediaAsync(QQBot.NET.Models.MediaReq,System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.UploadGroupMediaAsync(QQBot.NET.Models.MediaReq,System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.UploadGroupMediaAsync(QQBot.NET.Models.MediaReq,System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.SetEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.EmojiType,System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.SetEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.EmojiType,System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.SetEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.EmojiType,System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.SetEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.EmojiType,System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.SetEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.Emoji)">
            <inheritdoc cref="M:QQBot.NET.BotService.SetEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.Emoji)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.SetEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.Emoji)">
            <inheritdoc cref="M:QQBot.NET.BotService.SetEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.Emoji)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.DeleteEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.EmojiType,System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.DeleteEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.EmojiType,System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.DeleteEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.EmojiType,System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.DeleteEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.EmojiType,System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.DeleteEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.Emoji)">
            <inheritdoc cref="M:QQBot.NET.BotService.DeleteEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.Emoji)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.DeleteEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.Emoji)">
            <inheritdoc cref="M:QQBot.NET.BotService.DeleteEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.Emoji)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.GetEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.EmojiType,System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.GetEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.EmojiType,System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.GetEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.EmojiType,System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.GetEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.EmojiType,System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.GetEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.Emoji)">
            <inheritdoc cref="M:QQBot.NET.BotService.GetEmojiReactionAsync(System.String,System.String,QQBot.NET.Models.Emoji)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.GetEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.Emoji)">
            <inheritdoc cref="M:QQBot.NET.BotService.GetEmojiReactionAsync(QQBot.NET.Models.GuildMessage,QQBot.NET.Models.Emoji)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.RespondToInteractionAsync(System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.RespondToInteractionAsync(System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.GetCurrentUserAsync">
            <inheritdoc cref="M:QQBot.NET.BotService.GetCurrentUserAsync"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.GetGuildsAsync">
            <inheritdoc cref="M:QQBot.NET.BotService.GetGuildsAsync"/>"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.GetGuildAsync(System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.GetGuildAsync(System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.GetChannelsAsync(System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.GetChannelsAsync(System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.GetChannelAsync(System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.GetChannelAsync(System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.CreateChannelAsync(System.String,QQBot.NET.Models.CreateChannelReq)">
            <inheritdoc cref="M:QQBot.NET.BotService.CreateChannelAsync(System.String,QQBot.NET.Models.CreateChannelReq)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.ModifyChannelAsync(System.String,QQBot.NET.Models.ModifyChannelReq)">
            <inheritdoc cref="M:QQBot.NET.BotService.ModifyChannelAsync(System.String,QQBot.NET.Models.ModifyChannelReq)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.DeleteChannelAsync(System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.DeleteChannelAsync(System.String)"/>
        </member>
        <member name="M:QQBot.NET.Models.ContextEventArgs.GetChannelOnlineMemberCountAsync(System.String)">
            <inheritdoc cref="M:QQBot.NET.BotService.GetChannelOnlineMemberCountAsync(System.String)"/>
        </member>
        <member name="T:QQBot.NET.Models.CreateChannelReq">
            <summary>
            子频道创建信息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.CreateChannelReq.Name">
            <summary>
            子频道名
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.CreateChannelReq.Type">
            <summary>
            子频道类型
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.CreateChannelReq.SubType">
            <summary>
            子频道子类型
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.CreateChannelReq.Position">
            <summary>
            排序值<br/>
            - postiton 从 1 开始<br/>
            - 当子频道类型为 子频道分组（ChannelType=4）时，由于 position 1 被未分组占用，所以 position 只能从 2 开始<br/>
            - 如果不传默认追加到分组下最后一个<br/>
            - 如果填写一个已经存在的值，那么会插入在原来的元素之前<br/>
            - 如果填写一个较大值，与不填是相同的表现，同时存储的值会根据真实的 position 进行重新计算，并不会直接使用传入的值<br/>
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.CreateChannelReq.ParentID">
            <summary>
            所属分组 ID，仅对子频道有效，对 子频道分组（ChannelType=4） 无效
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.CreateChannelReq.PrivateType">
            <summary>
            子频道私密类型
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.CreateChannelReq.PrivateUserIDs">
            <summary>
            子频道私密类型成员 ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.CreateChannelReq.SpeakPermission">
            <summary>
            子频道发言权限
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.CreateChannelReq.ApplicationID">
            <summary>
            用于标识应用子频道应用类型，仅应用子频道时会使用该字段，具体定义请参考 <a href="https://bot.q.qq.com/wiki/develop/api-v2/server-inter/channel/manage/channel/model.html#%E5%BA%94%E7%94%A8%E5%AD%90%E9%A2%91%E9%81%93%E7%9A%84%E5%BA%94%E7%94%A8%E7%B1%BB%E5%9E%8B">应用子频道的应用类型</a>
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.DirectMessageEventArgs">
            <summary>
            私信消息事件参数
            </summary>
        </member>
        <member name="M:QQBot.NET.Models.DirectMessageEventArgs.ReplyAsync(QQBot.NET.Models.GuildMessageReq,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:QQBot.NET.Models.DirectMessageSession">
            <summary>
            私信会话（DMS）
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.DirectMessageSession.GuildID">
            <summary>
            私信会话关联的频道ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.DirectMessageSession.ChannelID">
            <summary>
            私信会话关联的子频道ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.DirectMessageSession.CreateTime">
            <summary>
            创建私信会话时间戳<br/>尼玛有的API返回具体时间，有的API返回时间戳数值，而且这数值还是字符串类型的，你后端怎么这么不统一啊？？？
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.DirectMessageSessionCreateInfo">
            <summary>
            私信会话创建信息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.DirectMessageSessionCreateInfo.RecipientID">
            <summary>
            接收者ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.DirectMessageSessionCreateInfo.SourceGuildID">
            <summary>
            源频道ID
            </summary>
        </member>
        <member name="M:QQBot.NET.Models.DirectMessageSessionCreateInfo.#ctor">
            <summary>
            创建私信会话创建信息
            </summary>
        </member>
        <member name="M:QQBot.NET.Models.DirectMessageSessionCreateInfo.#ctor(System.String,System.String)">
            <summary>
            创建私信会话创建信息
            </summary>
            <param name="recipientID">接收者ID</param>
            <param name="sourceGuildID">源频道ID</param>
        </member>
        <member name="T:QQBot.NET.Models.Embed">
            <summary>
            消息嵌入
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Embed.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Embed.Prompt">
            <summary>
            消息弹窗内容
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Embed.Thumbnail">
            <summary>
            缩略图
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Embed.Fields">
            <summary>
            嵌入字段数据
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.EmbedField">
            <summary>
            消息嵌入字段
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.EmbedField.Name">
            <summary>
            字段名
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.EmbedThumbnail">
            <summary>
            消息嵌入缩略图
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.EmbedThumbnail.Url">
            <summary>
            图片地址
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.Emoji">
            <summary>
            表情对象<br/><a href="https://bot.q.qq.com/wiki/develop/api-v2/openapi/emoji/model.html#emoji%E5%88%97%E8%A1%A8">Emoji列表</a>
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Emoji.ID">
            <summary>
            表情ID，系统表情使用数字为ID，emoji使用emoji本身为id<br/>详见：<a href="https://bot.q.qq.com/wiki/develop/api-v2/openapi/emoji/model.html#emoji%E5%88%97%E8%A1%A8">Emoji列表</a>
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Emoji.Type">
            <summary>
            表情类型 EmojiType
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.EmojiType">
            <summary>
            表情类型
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.EmojiType.System">
            <summary>
            系统表情
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.EmojiType.Emoji">
            <summary>
            emoji表情
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.Guild">
            <summary>
            频道对象
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Guild.ID">
            <summary>
            频道ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Guild.Name">
            <summary>
            频道名称
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Guild.Icon">
            <summary>
            频道头像地址
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Guild.OwnerID">
            <summary>
            创建人用户ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Guild.IsOwner">
            <summary>
            当前人是否是创建人
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Guild.MemberCount">
            <summary>
            成员数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Guild.MaxMembers">
            <summary>
            最大成员数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Guild.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Guild.JoinedAt">
            <summary>
            加入时间
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.GuildAttachment">
            <summary>
            消息附件
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildAttachment.Url">
            <summary>
            下载地址
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.GuildCreateEventArgs">
            <summary>
            频道创建事件参数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildCreateEventArgs.Guild">
            <summary>
            频道事件信息
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.GuildDeleteEventArgs">
            <summary>
            频道删除事件参数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildDeleteEventArgs.Guild">
            <summary>
            频道事件信息
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.GuildEventData">
            <summary>
            频道事件信息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildEventData.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildEventData.Icon">
            <summary>
            频道头像地址
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildEventData.ID">
            <summary>
            频道ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildEventData.JoinedAt">
            <summary>
            加入时间
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildEventData.MaxMembers">
            <summary>
            最大成员数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildEventData.MemberCount">
            <summary>
            成员数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildEventData.Name">
            <summary>
            频道名称
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildEventData.OperatorUserID">
            <summary>
            操作人用户ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildEventData.OwnerID">
            <summary>
            创建人用户ID
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.GuildMember">
            <summary>
            成员对象
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMember.User">
            <summary>
            用户的频道基础信息，只有成员相关接口中会填充此信息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMember.Nick">
            <summary>
            用户的昵称
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMember.Roles">
            <summary>
            用户在频道内的身份组ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMember.JoinedAt">
            <summary>
            用户加入频道的时间
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.GuildMessage">
            <summary>
            消息对象
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.ID">
            <summary>
            消息ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.ChannelID">
            <summary>
            子频道ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.GuildID">
            <summary>
            频道ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.Content">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.Timestamp">
            <summary>
            消息创建时间
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.EditedTimestamp">
            <summary>
            消息编辑时间
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.MentionEveryone">
            <summary>
            是否是@全员消息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.Author">
            <summary>
            消息创建者
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.Attachments">
            <summary>
            附件
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.Embeds">
            <summary>
            消息嵌入
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.Mentions">
            <summary>
            消息中@的人
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.Member">
            <summary>
            消息创建者的<see cref="T:QQBot.NET.Models.GuildMember"/>信息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.Ark">
            <summary>
            Ark消息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.Seq">
            <summary>
            用于消息间的排序，Seq 在同一子频道中按从先到后的顺序递增，不同的子频道之间消息无法排序。(目前只在消息事件中有值，(2022年8月1日) 后续废弃)
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.SeqInChannel">
            <summary>
            子频道消息 Seq，用于消息间的排序，Seq 在同一子频道中按从先到后的顺序递增，不同的子频道之间消息无法排序
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessage.MessageReference">
            <summary>
            引用消息对象
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.GuildMessageBuilder">
            <summary>
            消息构造器
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.GuildMessageBuilder._sb">
            <summary>
            字符串构造器
            </summary>
        </member>
        <member name="M:QQBot.NET.Models.GuildMessageBuilder.Raw(System.String)">
            <summary>
            添加原内容（不进行转义）
            </summary>
            <param name="data">内容</param>
            <returns>消息构造器</returns>
        </member>
        <member name="M:QQBot.NET.Models.GuildMessageBuilder.Text(System.String)">
            <summary>
            添加文本
            </summary>
            <param name="data">内容</param>
            <returns>消息构造器</returns>
        </member>
        <member name="M:QQBot.NET.Models.GuildMessageBuilder.At(System.String)">
            <summary>
            添加 @某人 消息<br/>解析为 @用户 标签
            </summary>
            <param name="id">用户ID</param>
            <returns>消息构造器</returns>
        </member>
        <member name="M:QQBot.NET.Models.GuildMessageBuilder.AtAll">
            <summary>
            添加 @全体成员 消息<br/>解析为 @所有人 标签，需要机器人拥有发送 @所有人 消息的权限
            </summary>
            <returns>消息构造器</returns>
        </member>
        <member name="M:QQBot.NET.Models.GuildMessageBuilder.Channel(System.String)">
            <summary>
            添加子频道引用消息<br/>解析为 #子频道 标签，点击可以跳转至子频道，仅支持当前频道内的子频道
            </summary>
            <param name="id">频道ID</param>
            <returns>消息构造器</returns>
        </member>
        <member name="M:QQBot.NET.Models.GuildMessageBuilder.Emoji(System.String)">
            <summary>
            添加表情消息<br/>解析为系统表情，具体表情id参考 <a href="https://bot.q.qq.com/wiki/develop/api-v2/openapi/emoji/model.html#Emoji%E5%88%97%E8%A1%A8">Emoji 列表</a>，仅支持type=1的系统表情，type=2的emoji表情直接按字符串填写即可
            </summary>
            <param name="id">表情ID</param>
            <returns>消息构造器</returns>
        </member>
        <member name="M:QQBot.NET.Models.GuildMessageBuilder.ToString">
            <inheritdoc/>
        </member>
        <member name="T:QQBot.NET.Models.GuildMessageButton">
            <summary>
            消息按钮
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageButton.ID">
            <summary>
            （选填）按钮ID：在一个KeyBoard消息内设置唯一
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageButton.Label">
            <summary>
            （必填）按钮上的文字
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageButton.VisitedLabel">
            <summary>
            （必填）点击后按钮的上文字
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageButton.Style">
            <summary>
            （必填）按钮样式
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageButton.Action">
            <summary>
            （必填）按钮行为
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageButton.Permission">
            <summary>
            （必填）操作权限
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageButton.SpecifiedRoleIDs">
            <summary>
            （选填）有权限的身份组ID的列表（仅频道可用）
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageButton.SpecifiedUserIDs">
            <summary>
            （选填）有权限的用户ID的列表
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageButton.Data">
            <summary>
            （必填）操作相关的数据
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageButton.Reply">
            <summary>
            （选填）指令按钮可用，指令是否带引用回复本消息，默认 false。支持版本 8983
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageButton.Enter">
            <summary>
            （选填）指令按钮可用，点击按钮后直接自动发送 data，默认 false。支持版本 8983
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageButton.Anchor">
            <summary>
            （选填）指令按钮可用，自动锚点到选图器，默认 false，设置 ture 后会忽略 enter 配置。支持版本 8983
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageButton.ClickLimit">
            <summary>
            （选填）可操作点击的次数，默认不限
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageButton.UnsupportTips">
            <summary>
            （必填）客户端不支持本action的时候，弹出的toast文案
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.GuildMessageButtonAction">
            <summary>
            消息按钮行为
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.GuildMessageButtonAction.JumpLink">
            <summary>
            跳转按钮：http 或 小程序 客户端识别 scheme, data字段为链接
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.GuildMessageButtonAction.Callback">
            <summary>
            回调按钮：回调后台接口, data 传给后台
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.GuildMessageButtonAction.Command">
            <summary>
            指令按钮：自动在输入框插入 @bot data
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.GuildMessageButtonPermission">
            <summary>
            消息按钮权限
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.GuildMessageButtonPermission.SpecifiedUser">
            <summary>
            指定用户可操作
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.GuildMessageButtonPermission.Administrator">
            <summary>
            仅管理者可操作
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.GuildMessageButtonPermission.Everyone">
            <summary>
            所有人可操作
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.GuildMessageButtonPermission.SpecifiedRole">
            <summary>
            指定身份组可操作（仅频道可用）
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.GuildMessageButtonStyle">
            <summary>
            消息按钮样式
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.GuildMessageButtonStyle.Gray">
            <summary>
            灰色线框
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.GuildMessageButtonStyle.Blue">
            <summary>
            蓝色线框
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.GuildMessageEventArgs">
            <summary>
            消息事件参数
            </summary>
        </member>
        <member name="M:QQBot.NET.Models.GuildMessageEventArgs.ReplyAsync(QQBot.NET.Models.GuildMessageReq,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:QQBot.NET.Models.GuildMessageReaction">
            <summary>
            表情表态对象
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageReaction.UserID">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageReaction.GuildID">
            <summary>
            频道ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageReaction.ChannelID">
            <summary>
            子频道ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageReaction.Target">
            <summary>
            表态对象
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageReaction.Emoji">
            <summary>
            表态所用表情
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.GuildMessageReq">
            <summary>
            可发送的消息<br/>content, embed, ark, image, markdown 至少需要有一个字段，否则无法下发消息。
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageReq.Content">
            <summary>
            （选填）消息内容，文本内容，支持<a href="https://bot.q.qq.com/wiki/develop/api-v2/server-inter/message/message_format.html">内嵌格式</a><br/>可以使用<see cref="T:QQBot.NET.Models.GuildMessageBuilder"/>来构建消息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageReq.Embed">
            <summary>
            （选填）embed 消息，一种特殊的 ark
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageReq.Ark">
            <summary>
            （选填）ark 消息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageReq.MessageReference">
            <summary>
            （选填）引用消息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageReq.Image">
            <summary>
            （选填）图片url地址，平台会转存该图片，用于下发图片消息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageReq.MessageID">
            <summary>
            （选填）要回复的消息id(Message.id), 在 AT_CREATE_MESSAGE 事件中获取。
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildMessageReq.Markdown">
            <summary>
            （选填）markdown 信息
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.GuildUpdateEventArgs">
            <summary>
            频道更新事件参数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildUpdateEventArgs.Guild">
            <summary>
            频道事件信息
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.GuildUser">
            <summary>
            用户对象<br/>用户对象中所涉及的 ID 类数据，都仅在机器人场景流通，与真实的 ID 无关。请不要理解为真实的 ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildUser.ID">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildUser.Username">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildUser.Avatar">
            <summary>
            用户头像地址
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildUser.IsBot">
            <summary>
            是否是机器人
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildUser.UnionOpenID">
            <summary>
            特殊关联应用的 openid，需要特殊申请并配置后才会返回。如需申请，请联系平台运营人员。
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.GuildUser.UnionUserAccount">
            <summary>
            机器人关联的互联应用的用户信息，与union_openid关联的应用是同一个。如需申请，请联系平台运营人员。
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.Intents">
            <summary>
            事件订阅Intents
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.Intents.GUILDS">
            <summary>
            <code>
            GUILDS (1 &lt;&lt; 0)<br/>
              - GUILD_CREATE           // 当机器人加入新guild时<br/>
              - GUILD_UPDATE           // 当guild资料发生变更时<br/>
              - GUILD_DELETE           // 当机器人退出guild时<br/>
              - CHANNEL_CREATE         // 当channel被创建时<br/>
              - CHANNEL_UPDATE         // 当channel被更新时<br/>
              - CHANNEL_DELETE         // 当channel被删除时<br/>
            </code>
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.Intents.GUILD_MEMBERS">
            <summary>
            <code>
            GUILD_MEMBERS (1 &lt;&lt; 1)
              - GUILD_MEMBER_ADD       // 当成员加入时
              - GUILD_MEMBER_UPDATE    // 当成员资料变更时
              - GUILD_MEMBER_REMOVE    // 当成员被移除时
            </code>
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.Intents.GUILD_MESSAGES">
            <summary>
            <code>
            GUILD_MESSAGES (1 &lt;&lt; 9)    // 消息事件，仅 *私域* 机器人能够设置此 intents。
              - MESSAGE_CREATE         // 发送消息事件，代表频道内的全部消息，而不只是 at 机器人的消息。内容与 AT_MESSAGE_CREATE 相同
              - MESSAGE_DELETE         // 删除（撤回）消息事件
            </code>
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.Intents.GUILD_MESSAGE_REACTIONS">
            <summary>
            <code>
            GUILD_MESSAGE_REACTIONS (1 &lt;&lt; 10)
              - MESSAGE_REACTION_ADD    // 为消息添加表情表态
              - MESSAGE_REACTION_REMOVE // 为消息删除表情表态
            </code>
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.Intents.DIRECT_MESSAGE">
            <summary>
            <code>
            DIRECT_MESSAGE (1 &lt;&lt; 12)
              - DIRECT_MESSAGE_CREATE   // 当收到用户发给机器人的私信消息时
              - DIRECT_MESSAGE_DELETE   // 删除（撤回）消息事件
            </code>
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.Intents.INTERACTION">
            <summary>
            <code>
            INTERACTION (1 &lt;&lt; 26)
              - INTERACTION_CREATE     // 互动事件创建时
            </code>
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.Intents.MESSAGE_AUDIT">
            <summary>
            <code>
            MESSAGE_AUDIT (1 &lt;&lt; 27)
              - MESSAGE_AUDIT_PASS     // 消息审核通过
              - MESSAGE_AUDIT_REJECT   // 消息审核不通过
            </code>
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.Intents.FORUMS_EVENT">
            <summary>
            <code>
            FORUMS_EVENT (1 &lt;&lt; 28)  // 论坛事件，仅 *私域* 机器人能够设置此 intents。
              - FORUM_THREAD_CREATE     // 当用户创建主题时
              - FORUM_THREAD_UPDATE     // 当用户更新主题时
              - FORUM_THREAD_DELETE     // 当用户删除主题时
              - FORUM_POST_CREATE       // 当用户创建帖子时
              - FORUM_POST_DELETE       // 当用户删除帖子时
              - FORUM_REPLY_CREATE      // 当用户回复评论时
              - FORUM_REPLY_DELETE      // 当用户回复评论时
              - FORUM_PUBLISH_AUDIT_RESULT      // 当用户发表审核通过时
            </code>
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.Intents.AUDIO_ACTION">
            <summary>
            <code>
            AUDIO_ACTION (1 &lt;&lt; 29)
              - AUDIO_START             // 音频开始播放时
              - AUDIO_FINISH            // 音频播放结束时
              - AUDIO_ON_MIC            // 上麦时
              - AUDIO_OFF_MIC           // 下麦时
            </code>
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.Intents.PUBLIC_GUILD_MESSAGES">
            <summary>
            <code>
            PUBLIC_GUILD_MESSAGES (1 &lt;&lt; 30) // 消息事件，此为公域的消息事件
              - AT_MESSAGE_CREATE       // 当收到@机器人的消息时
              - PUBLIC_MESSAGE_DELETE   // 当频道的消息被删除时
            </code>
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.Intents.ALL">
            <summary>
            订阅所有事件，包括私域和公域的消息事件
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.Intents.ALL_PUBLIC">
            <summary>
            订阅所有公域事件，即排除仅私域的事件
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.Interaction">
            <summary>
            交互
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Interaction.ID">
            <summary>
            平台方事件 ID，可以用于被动消息发送
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Interaction.Type">
            <summary>
            事件类型<br/>
            按钮事件固定是 11
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Interaction.ChatType">
            <summary>
            聊天类型<br/>目前只有群和单聊有该字段，1 群聊，2 单聊，后续加入 3 频道
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Interaction.Timestamp">
            <summary>
            消息生产时间
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Interaction.GuildID">
            <summary>
            频道的OpenID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Interaction.ChannelID">
            <summary>
            文字子频道的OpenID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Interaction.GroupOpenID">
            <summary>
            群聊的OpenID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Interaction.ButtonData">
            <summary>
            操作按钮的data字段值【在发送按钮时规划】
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Interaction.ButtonID">
            <summary>
            操作按钮的id字段值【在发送按钮时规划】
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Interaction.UserID">
            <summary>
            操作的用户OpenID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Interaction.MessageID">
            <summary>
            操作的消息ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Interaction.Version">
            <summary>
            默认 1
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.Interaction.ApplicationID">
            <summary>
            机器人的AppID
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.InteractionEventArgs">
            <summary>
            交互事件参数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.InteractionEventArgs.Interaction">
            <summary>
            交互信息
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.Keyboard">
            <summary>
            消息交互
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.Keyboard.Content">
            <summary>
            消息交互内容
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.KeyboardContent">
            <summary>
            消息交互内容
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.KeyboardContent.Rows">
            <summary>
            消息交互内容行列表
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.KeyboardContentRow">
            <summary>
            消息交互内容行
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.KeyboardContentRow.Buttons">
            <summary>
            消息按钮列表
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.MarkDown">
            <summary>
            MarkDown
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.MarkDown.Content">
            <summary>
            （选填）原生MarkDown文本内容
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.MarkDown.CustomTemplateID">
            <summary>
            （选填）MarkDown模版ID，申请模版后获得
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.MarkDown.Params">
            <summary>
            （选填）模版内变量与填充值的键值映射
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.MarkDownBuilder">
            <summary>
            MarkDown构造器
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.MarkDownBuilder._sb">
            <summary>
            字符串构造器
            </summary>
        </member>
        <member name="M:QQBot.NET.Models.MarkDownBuilder.Raw(System.String)">
            <summary>
            添加原内容（不进行转义）
            </summary>
            <param name="data">内容</param>
            <returns>消息构造器</returns>
        </member>
        <member name="M:QQBot.NET.Models.MarkDownBuilder.Text(System.String)">
            <summary>
            添加文本
            </summary>
            <param name="data">内容</param>
            <returns>消息构造器</returns>
        </member>
        <member name="M:QQBot.NET.Models.MarkDownBuilder.At(System.String)">
            <summary>
            添加 @某人 消息<br/>解析为 @用户 标签
            </summary>
            <param name="id">用户ID</param>
            <returns>消息构造器</returns>
        </member>
        <member name="M:QQBot.NET.Models.MarkDownBuilder.AtAll">
            <summary>
            添加 @全体成员 消息<br/>解析为 @所有人 标签，需要机器人拥有发送 @所有人 消息的权限
            </summary>
            <returns>消息构造器</returns>
        </member>
        <member name="M:QQBot.NET.Models.MarkDownBuilder.Channel(System.String)">
            <summary>
            添加子频道引用消息<br/>解析为 #子频道 标签，点击可以跳转至子频道，仅支持当前频道内的子频道
            </summary>
            <param name="id">频道ID</param>
            <returns>消息构造器</returns>
        </member>
        <member name="M:QQBot.NET.Models.MarkDownBuilder.Emoji(System.String)">
            <summary>
            添加表情消息<br/>解析为系统表情，具体表情id参考 <a href="https://bot.q.qq.com/wiki/develop/api-v2/openapi/emoji/model.html#Emoji%E5%88%97%E8%A1%A8">Emoji 列表</a>，仅支持type=1的系统表情，type=2的emoji表情直接按字符串填写即可
            </summary>
            <param name="id">表情ID</param>
            <returns>消息构造器</returns>
        </member>
        <member name="M:QQBot.NET.Models.MarkDownBuilder.Command(System.String,System.Boolean,System.Boolean)">
            <summary>
            添加命令消息<br/>采用格式：&lt;cmd reply=true cmd="/参数指令（带引用本消息）"&gt;
            </summary>
            <param name="name">命令名称（不会自动转义，需手动转义）</param>
            <param name="enter">是否发出信息</param>
            <param name="reply">是否引用原消息</param>
            <returns>MarkDown构造器</returns>
        </member>
        <member name="M:QQBot.NET.Models.MarkDownBuilder.Build">
            <summary>
            构建MarkDown对象
            </summary>
            <returns>MarkDown</returns>
        </member>
        <member name="M:QQBot.NET.Models.MarkDownBuilder.ToString">
            <inheritdoc/>
        </member>
        <member name="T:QQBot.NET.Models.MarkDownParam">
            <summary>
            MarkDown参数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.MarkDownParam.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.MarkDownParam.Values">
            <summary>
            值表
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.MediaReq">
            <summary>
            富媒体消息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.MediaReq.FileType">
            <summary>
            （必填）媒体类型
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.MediaReq.Url">
            <summary>
            （必填）需要发送媒体资源的Url
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.MediaReq.ServeSendMessage">
            <summary>
            （必填）设置 true 会直接发送消息到目标端，且会占用主动消息频次
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.MediaReq.FileData">
            <summary>
            （选填）【暂未支持】
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.MediaRes">
            <summary>
            富媒体消息引用
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.MediaRes.FileInfo">
            <summary>
            消息信息
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.MediaType">
            <summary>
            富媒体消息类型
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.MediaType.Image">
            <summary>
            图片（png/jpg）
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.MediaType.Vedio">
            <summary>
            视频（mp4）
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.MediaType.Voice">
            <summary>
            语音（silk）
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.MediaType.File">
            <summary>
            文件（暂不开放）
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.MessageReactionEventArgs">
            <summary>
            消息表态事件参数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.MessageReactionEventArgs.MessageReaction">
            <summary>
            消息表态
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.MessageReference">
            <summary>
            消息引用
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.MessageReference.MessageID">
            <summary>
            需要引用回复的消息ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.MessageReference.IgnoreGetMessageError">
            <summary>
            是否忽略获取引用消息详情错误，默认否
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ModifyChannelReq">
            <summary>
            修改子频道信息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ModifyChannelReq.Name">
            <summary>
            子频道名
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ModifyChannelReq.Position">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ModifyChannelReq.ParentID">
            <summary>
            分组ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ModifyChannelReq.PrivateType">
            <summary>
            子频道私密类型
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ModifyChannelReq.SpeakPermission">
            <summary>
            子频道发言权限
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.PrivateType">
            <summary>
            子频道私密类型
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.PrivateType.Public">
            <summary>
            公开频道
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.PrivateType.Admin">
            <summary>
            群主管理员可见
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.PrivateType.AdminAndSpecified">
            <summary>
            群主管理员+指定成员，可使用 修改子频道权限接口 指定成员
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.QQAttachment">
            <summary>
            QQ消息附件
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQAttachment.ContentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQAttachment.Filename">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQAttachment.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQAttachment.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQAttachment.Size">
            <summary>
            尺寸
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQAttachment.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.QQ.QQMessageEventArgs">
            <summary>
            QQ消息事件参数
            </summary>
        </member>
        <member name="M:QQBot.NET.Models.QQ.QQMessageEventArgs.ReplyAsync(QQBot.NET.Models.QQMessageReq,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:QQBot.NET.Models.QQMessageRecv">
            <summary>
            接收到的QQ消息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageRecv.ID">
            <summary>
            消息唯一ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageRecv.Author">
            <summary>
            发送者
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageRecv.Content">
            <summary>
            文本消息内容
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageRecv.Timestamp">
            <summary>
            消息生产时间（RFC3339）
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageRecv.Attachments">
            <summary>
            富媒体文件附件，文件类型："图片，语音，视频，文件"
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.QQMessageReq">
            <summary>
            QQ消息请求
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageReq.Content">
            <summary>
            （选填）文本内容
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageReq.Type">
            <summary>
            （必填）消息类型
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageReq.MarkDown">
            <summary>
            （选填）MarkDown
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageReq.Keyboard">
            <summary>
            （选填）消息交互
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageReq.Ark">
            <summary>
            （选填）Ark
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageReq.Media">
            <summary>
            （选填）富媒体消息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageReq.Image">
            <summary>
            （选填）【暂不支持】
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageReq.Reference">
            <summary>
            （选填）【暂未支持】消息引用
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageReq.EventID">
            <summary>
            （选填）【暂未支持】前置收到的事件ID，用于发送被动消息
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageReq.MessageID">
            <summary>
            （选填）前置收到的用户发送过来的消息 ID，用于发送被动消息（回复）
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageReq.MessageSeq">
            <summary>
            （选填）回复消息的序号，与 msg_id 联合使用，避免相同消息id回复重复发送，不填默认是1。相同的 msg_id + msg_seq 重复发送会失败。
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.QQMessageRes">
            <summary>
            QQ消息结果
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageRes.ID">
            <summary>
            消息唯一ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQMessageRes.Timestamp">
            <summary>
            发送时间
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.QQMessageType">
            <summary>
            QQ消息类型
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.QQMessageType.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.QQMessageType.ImageAndText">
            <summary>
            图文混排
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.QQMessageType.MarkDown">
            <summary>
            MarkDown
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.QQMessageType.Ark">
            <summary>
            Ark
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.QQMessageType.Embed">
            <summary>
            Embed
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.QQMessageType.Media">
            <summary>
            富媒体
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.QQUser">
            <summary>
            QQ消息发送者
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.QQUser.ID">
            <summary>
            用户OpenID
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ReactionRes">
            <summary>
            获取消息表情表态的用户列表结果
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ReactionRes.Users">
            <summary>
            用户对象，参考 User，会返回 id, username, avatar
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ReactionRes.Cookie">
            <summary>
            分页参数，用于拉取下一页
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ReactionRes.IsEnd">
            <summary>
            是否已拉取完成到最后一页，true代表完成
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ReactionTarget">
            <summary>
            表态对象
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ReactionTarget.ID">
            <summary>
            表态对象ID
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ReactionTarget.Type">
            <summary>
            表态对象类型
            </summary>
        </member>
        <member name="T:QQBot.NET.Models.ReplyEventArgs`3">
            <summary>
            回复消息事件参数
            </summary>
        </member>
        <member name="P:QQBot.NET.Models.ReplyEventArgs`3.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="M:QQBot.NET.Models.ReplyEventArgs`3.ReplyAsync(`1,System.Boolean)">
            <summary>
            快速回复消息<br/>注意：如果消息需要审核，会抛出异常，详见 <a href="https://bot.q.qq.com/wiki/develop/api/openapi/error/error.html#%E9%94%99%E8%AF%AF%E7%A0%81%E5%A4%84%E7%90%86">错误码处理</a> 304023与304024
            </summary>
            <param name="req">要发送的消息</param>
            <param name="setMessageIDAuto">是否自动设置消息ID。如果不设置消息ID，会被视为推送消息，并占用推送消息额度（私域除外）</param>
            <returns>消息对象</returns>
        </member>
        <member name="T:QQBot.NET.Models.SpeakPermission">
            <summary>
            子频道发言权限
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.SpeakPermission.Invalid">
            <summary>
            无效类型
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.SpeakPermission.All">
            <summary>
            所有人
            </summary>
        </member>
        <member name="F:QQBot.NET.Models.SpeakPermission.AdminAndSpecified">
            <summary>
            群主管理员+指定成员，可使用 修改子频道权限接口 指定成员
            </summary>
        </member>
        <member name="T:QQBot.NET.Utils.GuildMessageHelper">
            <summary>
            频道消息帮助类，可以转义/逆转义消息
            </summary>
        </member>
        <member name="M:QQBot.NET.Utils.GuildMessageHelper.Escape(System.String)">
            <summary>
            转义
            </summary>
            <param name="data">内容</param>
            <returns>转义后的内容</returns>
        </member>
        <member name="M:QQBot.NET.Utils.GuildMessageHelper.Unescape(System.String)">
            <summary>
            逆转义
            </summary>
            <param name="data">内容</param>
            <returns>逆转义后的内容</returns>
        </member>
    </members>
</doc>
